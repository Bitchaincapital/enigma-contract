kind: pipeline
name: default
steps:

  - name: integration
    image: enigmampc/docker-client
    privileged: true
    volumes:
      - name: sock
        path: /var/run/docker.sock
    commands:
      - export MATCHING_BRANCH_CORE="$(git ls-remote --heads https://github.com/enigmampc/enigma-core.git ${DRONE_BRANCH} | wc -l)"
      - export MATCHING_BRANCH_P2P="$(git ls-remote --heads https://github.com/enigmampc/enigma-p2p.git ${DRONE_BRANCH} | wc -l)"
      - export MATCHING_BRANCH_DOCKER="$(git ls-remote --heads https://github.com/enigmampc/docker-environment.git ${DRONE_BRANCH} | wc -l)"
      - export DOCKER_TAG=contract_${DRONE_BUILD_NUMBER}
      - |
        if [[ "$MATCHING_BRANCH_DOCKER" == 1 ]]; then
          # which includes master and develop because these always exist
          git clone --single-branch --branch ${DRONE_BRANCH} https://github.com/enigmampc/docker-environment.git
        else
          # otherwise we are on a feature branch, and we'll build against develop
          git clone --single-branch --branch develop https://github.com/enigmampc/docker-environment.git
        fi
      - cd docker-environment && cp .env.template .env
      - sed -i "s/COMPOSE_PROJECT_NAME=.*/COMPOSE_PROJECT_NAME=enigma_contract_${DRONE_BUILD_NUMBER}/" .env
      - sed -i "s/DOCKER_TAG=latest/DOCKER_TAG=${DOCKER_TAG}/" .env;
      - |
        /bin/bash -c '
        declare -a PROJECTS=(worker km)
        declare -A DOCKER_IMAGES=([core]=worker_hw [km]=key_management_hw)
        declare -A GIT_BRANCH_ARG=([core]=GIT_BRANCH_CORE [km]=GIT_BRANCH_CORE [p2p]=GIT_BRANCH_P2P)
        declare -A PROJECT_DIRECTORY=([worker]=worker [km]=km)
        declare -A PROJECT_BRANCH_FOUND=([worker]=$MATCHING_BRANCH_CORE+$MATCHING_BRANCH_P2P [km]=$MATCHING_BRANCH_CORE)
        for project in $${PROJECTS[@]}; do
          DOCKER_IMAGE="enigmampc/$${DOCKER_IMAGES[$project]}"
          if [[ "$DRONE_BRANCH" == "master" ]]; then
            docker pull "$DOCKER_IMAGE:latest"
            docker tag "$DOCKER_IMAGE:latest" "$DOCKER_IMAGE:$DOCKER_TAG"
          elif [ "$${PROJECT_BRANCH_FOUND[$project]}" -eq 0 ]; then
            docker pull "$DOCKER_IMAGE:develop"
            docker tag "$DOCKER_IMAGE:develop" "$DOCKER_IMAGE:$DOCKER_TAG"
          else
            if [[ "$project" == "km" ]]; then
              make clone-km BRANCH=${DRONE_BRANCH}
              make build-km DOCKER_TAG=$DOCKER_TAG
            else
              if [[ "$MATCHING_BRANCH_P2P" == 1 ]]; then
                make clone-p2p BRANCH=${DRONE_BRANCH}
              else
                make clone-p2p BRANCH=develop
              fi
              if [[ "$MATCHING_BRANCH_CORE" == 1 ]]; then
                make clone-core BRANCH=${DRONE_BRANCH}
              else
                make clone-core BRANCH=develop
              fi
              make build-worker DOCKER_TAG=$DOCKER_TAG
            fi
          fi
        done'
      - make clone-contract BRANCH=${DRONE_BRANCH}
      - make clone-client BRANCH=${DRONE_BRANCH}
      - make build-contract DOCKER_TAG=$DOCKER_TAG
      - make build-contract DOCKER_TAG=$DOCKER_TAG
      - export NODES=3
      - docker-compose -f docker-compose_hw.yml up --scale worker=$NODES --exit-code-from client && export RESULT=$? || export RESULT=$?
      - docker-compose -f docker-compose_hw.yml up down -v --rmi all || true
      - if [ $RESULT -ne 0 ]; then exit 1; fi

  - name: deploy
    image: enigmampc/docker-client
    depends_on:
      - integration
    when:
      branch:
        - develop
        - master
    privileged: true
    volumes:
      - name: sock
        path: /var/run/docker.sock
    environment:
      USERNAME:
        from_secret: username
      PASSWORD:
        from_secret: password
    commands:
      - echo $PASSWORD | docker login -u $USERNAME --password-stdin
      - if [[ ${DRONE_BRANCH} == "master" ]]; then export DOCKER_TAG=latest; else export DOCKER_TAG=develop; fi
      - docker tag enigmampc/contract:contract_${DRONE_BUILD_NUMBER} enigmampc/contract:$DOCKER_TAG
      - docker tag enigmampc/client:contract_${DRONE_BUILD_NUMBER} enigmampc/client:$DOCKER_TAG
      - docker push enigmampc/contract:$DOCKER_TAG
      - docker push enigmampc/client:$DOCKER_TAG

volumes:
  - name: sock
    host:
      path: /var/run/docker.sock
