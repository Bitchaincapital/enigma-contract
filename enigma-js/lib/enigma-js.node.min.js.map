{"version":3,"sources":["webpack://enigma-js/webpack/universalModuleDefinition","webpack://enigma-js/webpack/bootstrap","webpack://enigma-js/external \"node-forge\"","webpack://enigma-js/external \"eventemitter3\"","webpack://enigma-js/external \"jsbi\"","webpack://enigma-js/external \"web3-utils\"","webpack://enigma-js/external \"buffer\"","webpack://enigma-js/external \"eth-crypto\"","webpack://enigma-js/external \"elliptic\"","webpack://enigma-js/external \"jayson/lib/client/browser\"","webpack://enigma-js/external \"axios\"","webpack://enigma-js/external \"ethereumjs-abi\"","webpack://enigma-js/external \"@babel/polyfill\"","webpack://enigma-js/./src/enigma-utils.js","webpack://enigma-js/./src/emitterConstants.js","webpack://enigma-js/./src/Admin.js","webpack://enigma-js/./src/models/Task.js","webpack://enigma-js/./src/Enigma.js","webpack://enigma-js/./src/index.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","forge","options","usePureJavaScript","EC","elliptic","ec","appendMessages","hexStr","inputsArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","iterator","next","done","input","remove0x","JSBI","BigInt","length","toString","padStart","err","return","appendArrayMessages","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","array","hexString","substring","utils","sender","nonce","web3Utils","soliditySha3","v","seed","workerAddresses","workerStakes","codeHash","inputsHashes","lastStateDeltaHash","stateDeltaHashes","outputHashes","gasesUsed","optionalEthereumData","optionalEthereumContractAddress","successFlag","enclavePublicKey","clientPrivateKey","clientKey","keyFromPrivate","sharedPoints","keyFromPublic","getPublic","mul","getPrivate","y","getY","isOdd","x","getX","yBuffer","Buffer","from","xBuffer","toArrayLike","sha256","md","update","digest","toHex","keyHex","msg","iv","arguments","random","getBytesSync","util","hexToBytes","cipher","createCipher","start","createBuffer","finish","output","putBuffer","tag","putBytes","msgHex","msgBuf","slice","decipher","createDecipher","Error","engValue","Math","pow","hexToAscii","replace","stack","code","parseInt","substr","isNaN","push","String","fromCharCode","join","sleep","ms","Promise","resolve","setTimeout","ERROR","DEPOSIT_TRANSACTION_HASH","DEPOSIT_CONFIRMATION","DEPOSIT_RECEIPT","WITHDRAW_TRANSACTION_HASH","WITHDRAW_CONFIRMATION","WITHDRAW_RECEIPT","LOGIN_TRANSACTION_HASH","LOGIN_CONFIRMATION","LOGIN_RECEIPT","LOGOUT_TRANSACTION_HASH","LOGOUT_CONFIRMATION","LOGOUT_RECEIPT","DEPLOY_SC_ADDR_RESULT","DEPLOY_SC_ETH_TRANSACTION_HASH","DEPLOY_SC_ETH_CONFIRMATION","DEPLOY_SC_ETH_RECEIPT","DEPLOY_SC_ENG_RECEIPT","CREATE_TASK","CREATE_TASK_INPUT","CREATE_TASK_RECORD_TRANSACTION_HASH","CREATE_TASK_RECORD_CONFIRMATION","CREATE_TASK_RECORD_RECEIPT","CREATE_TASK_RECORD","CREATE_TASK_RECORDS_TRANSACTION_HASH","CREATE_TASK_RECORDS_CONFIRMATION","CREATE_TASK_RECORDS_RECEIPT","CREATE_TASK_RECORDS","SEND_TASK_INPUT_RESULT","POLL_TASK_STATUS_RESULT","GET_TASK_RESULT_RESULT","DEPLOY_SECRET_CONTRACT_RESULT","Admin","web3","enigmaContract","tokenContract","txDefaults","enigma","_classCallCheck","this","sigAddr","methods","getWorkerFromSigningAddress","result","account","status","report","balance","logs","getWorker","worker","scAddr","getSecretContract","index","stop","stateDeltaHash","includes","_this","emitter","EventEmitter","_asyncToGenerator","regeneratorRuntime","mark","_callee9","wrap","_context9","prev","login","send","on","hash","emit","eeConstants","confirmationNumber","receipt","t0","message","_this2","_callee10","_context10","logout","amount","_this3","_callee11","_context11","balanceOf","sent","abrupt","approve","address","deposit","_this4","_callee12","_context12","withdraw","signer","Task","encryptedFn","encryptedAbiEncodedArgs","gasLimit","gasPx","msgId","userPubKey","firstBlockNumber","workerAddress","workerEncryptionKey","userTaskSig","preCode","preCodeHash","isContractDeploymentTask","Task_classCallCheck","inputsHash","transactionHash","taskId","ethStatus","proof","creationBlockNumber","encryptedAbiEncodedOutputs","delta","usedGas","ethereumPayload","ethereumAddress","workerTaskSig","engStatus","decryptedOutput","Enigma","enigmaContractAddr","tokenContractAddr","rpcAddr","Enigma_classCallCheck","client","jaysonBrowserClient","request","callback","axios","post","JSON","parse","headers","Content-Type","credentials","then","response","data","error","text","stringify","catch","workerParamsCache","selectedWorkerGroupCache","createContracts","admin","eth","Contract","EnigmaContract","EnigmaTokenContract","fn","args","scAddrOrPreCode","Enigma_asyncToGenerator","_callee","preCodeArray","argsTranspose","abiEncodedArgs","abiEncodedArgsArray","_n","blockNumber","workerParams","_this$obtainTaskKeyPa","publicKey","privateKey","getWorkerEncryptionKeyResult","id","workerSig","hexToVerify","recAddress","derivedKey","_context","getUserTaskDeployments","t1","generateScAddr","map","col","row","abi","encodeParameters","getBlockNumber","getWorkerParams","selectWorkerGroup","toLowerCase","obtainTaskKeyPair","reject","EthCrypto","recover","console","concat","getDerivedKey","encryptMessage","sign","t2","task","_callee2","_context2","createDeploymentTaskRecord","createTaskRecord","events","TaskRecordCreated","returnValues","tasks","_callee3","gasLimits","gasPxs","fees","totalFees","_context3","reduce","a","b","createTaskRecords","taskIds","TaskRecordsCreated","getTaskRecord","outputHash","custodian","getReport","keys","epochSize","getEpochSize","getWorkerParamsResult","workers","stakes","params","workerGroupSize","tokenCpt","add","selectedWorkers","keccak256","randVal","remainder","selectedWorker","subtract","_callee8","rpcEndpointName","emitName","_context8","serializeTask","_this5","getTaskResultResult","signature","decryptMessage","withResult","_this6","generator","_this7","innerPollTaskStatus","pollTaskStatusGen","encodedPrivateKey","window","localStorage","getItem","createInstance","seedFileSync","needed","fillString","bytesToHex","getBytes","setItem","btoa","atob","publicKeyByPrivateKey","_this8","scTask","createTask","sendTaskInput","_this9","_context13","encryptedArgs","userDHKey","contractAddress","__webpack_exports__","Enigma_Enigma","enigma_utils","emitterConstants_namespaceObject"],"mappings":"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","file":"enigma-js.node.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"enigma-js\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"enigma-js\"] = factory();\n\telse\n\t\troot[\"enigma-js\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","module.exports = require(\"node-forge\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"jsbi\");","module.exports = require(\"web3-utils\");","module.exports = require(\"buffer\");","module.exports = require(\"eth-crypto\");","module.exports = require(\"elliptic\");","module.exports = require(\"jayson/lib/client/browser\");","module.exports = require(\"axios\");","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"@babel/polyfill\");","import JSBI from 'jsbi';\nimport web3Utils from 'web3-utils';\n// import RLP from 'rlp';\nimport forge from 'node-forge';\nimport elliptic from 'elliptic';\nimport {Buffer} from 'buffer';\n\nforge.options.usePureJavaScript = true;\n\nconst EC = elliptic.ec;\n\n// const pki = forge.pki;\n\n// const INTEL_CA = '-----BEGIN CERTIFICATE-----\\n' +\n//   'MIIFSzCCA7OgAwIBAgIJANEHdl0yo7CUMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNV\\n' +\n//   'BAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwLU2FudGEgQ2xhcmExGjAYBgNV\\n' +\n//   'BAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQDDCdJbnRlbCBTR1ggQXR0ZXN0\\n' +\n//   'YXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwIBcNMTYxMTE0MTUzNzMxWhgPMjA0OTEy\\n' +\n//   'MzEyMzU5NTlaMH4xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwL\\n' +\n//   'U2FudGEgQ2xhcmExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQD\\n' +\n//   'DCdJbnRlbCBTR1ggQXR0ZXN0YXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwggGiMA0G\\n' +\n//   'CSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCfPGR+tXc8u1EtJzLA10Feu1Wg+p7e\\n' +\n//   'LmSRmeaCHbkQ1TF3Nwl3RmpqXkeGzNLd69QUnWovYyVSndEMyYc3sHecGgfinEeh\\n' +\n//   'rgBJSEdsSJ9FpaFdesjsxqzGRa20PYdnnfWcCTvFoulpbFR4VBuXnnVLVzkUvlXT\\n' +\n//   'L/TAnd8nIZk0zZkFJ7P5LtePvykkar7LcSQO85wtcQe0R1Raf/sQ6wYKaKmFgCGe\\n' +\n//   'NpEJUmg4ktal4qgIAxk+QHUxQE42sxViN5mqglB0QJdUot/o9a/V/mMeH8KvOAiQ\\n' +\n//   'byinkNndn+Bgk5sSV5DFgF0DffVqmVMblt5p3jPtImzBIH0QQrXJq39AT8cRwP5H\\n' +\n//   'afuVeLHcDsRp6hol4P+ZFIhu8mmbI1u0hH3W/0C2BuYXB5PC+5izFFh/nP0lc2Lf\\n' +\n//   '6rELO9LZdnOhpL1ExFOq9H/B8tPQ84T3Sgb4nAifDabNt/zu6MmCGo5U8lwEFtGM\\n' +\n//   'RoOaX4AS+909x00lYnmtwsDVWv9vBiJCXRsCAwEAAaOByTCBxjBgBgNVHR8EWTBX\\n' +\n//   'MFWgU6BRhk9odHRwOi8vdHJ1c3RlZHNlcnZpY2VzLmludGVsLmNvbS9jb250ZW50\\n' +\n//   'L0NSTC9TR1gvQXR0ZXN0YXRpb25SZXBvcnRTaWduaW5nQ0EuY3JsMB0GA1UdDgQW\\n' +\n//   'BBR4Q3t2pn680K9+QjfrNXw7hwFRPDAfBgNVHSMEGDAWgBR4Q3t2pn680K9+Qjfr\\n' +\n//   'NXw7hwFRPDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADANBgkq\\n' +\n//   'hkiG9w0BAQsFAAOCAYEAeF8tYMXICvQqeXYQITkV2oLJsp6J4JAqJabHWxYJHGir\\n' +\n//   'IEqucRiJSSx+HjIJEUVaj8E0QjEud6Y5lNmXlcjqRXaCPOqK0eGRz6hi+ripMtPZ\\n' +\n//   'sFNaBwLQVV905SDjAzDzNIDnrcnXyB4gcDFCvwDFKKgLRjOB/WAqgscDUoGq5ZVi\\n' +\n//   'zLUzTqiQPmULAQaB9c6Oti6snEFJiCQ67JLyW/E83/frzCmO5Ru6WjU4tmsmy8Ra\\n' +\n//   'Ud4APK0wZTGtfPXU7w+IBdG5Ez0kE1qzxGQaL4gINJ1zMyleDnbuS8UicjJijvqA\\n' +\n//   '152Sq049ESDz+1rRGc2NVEqh1KaGXmtXvqxXcTB+Ljy5Bw2ke0v8iGngFBPqCTVB\\n' +\n//   '3op5KBG3RjbF6RRSzwzuWfL7QErNC8WEy5yDVARzTA5+xmBc388v9Dm21HGfcC8O\\n' +\n//   'DD+gT9sSpssq0ascmvH49MOgjt1yoysLtdCtJW/9FZpoOypaHx0R+mJTLwPXVMrv\\n' +\n//   'DaVzWh5aiEx+idkSGMnX\\n' +\n//   '-----END CERTIFICATE-----';\n\n// /**\n//  * Serialize the pem cert.\n//  *\n//  * @param {string} pem\n//  * @return {*}\n//  */\n// function readCert(pem) {\n//   let cert;\n//\n//   try {\n//     cert = pki.certificateFromPem(pem);\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to load report certificate : ' + e,\n//     };\n//   }\n//   return cert;\n// }\n\n// /**\n//  * Parse the signer's address from the quote\n//  *\n//  * @param {string} reportContent\n//  * @return {string}\n//  */\n// function parseAddress(reportContent) {\n//   const report = JSON.parse(reportContent);\n//   let b = new Buffer(report.isvEnclaveQuoteBody, 'base64');\n//\n//   return b.slice(368, 410).toString();\n// }\n\n// /**\n//  * Verifies that the worker signer address is associated to an authentic SGX report\n//  *\n//  * @param {string} signer\n//  * @param {string} encodedReport\n//  * @return {*}\n//  */\n// function verifyWorker(signer, encodedReport) {\n//   const reportArgs = RLP.decode(encodedReport);\n//   // console.log ('decoding report\\n', reportArgs[0], '\\n', reportArgs[1], '\\n', reportArgs[2]);\n//   const report = reportArgs[0].toString('utf8');\n//\n//   if (report === 'simulation') {\n//     return {\n//       verified: true,\n//       err: 'Running in simulation mode',\n//     };\n//   }\n//\n//   const reportCert = reportArgs[1].toString('utf8');\n//   const reportSig = reportArgs[2];\n//   const cert = readCert(reportCert);\n//   let md = forge.md.sha256.create();\n//\n//   md.update(report, 'utf8');\n//\n//   try {\n//     // verify data with a public key\n//     // (defaults to RSASSA PKCS#1 v1.5)\n//     // TODO: verify that the public key belongs to the signer\n//     const verified = cert.publicKey.verify(md.digest().bytes(), reportSig);\n//\n//     if (!verified) {\n//       return {\n//         verified: false,\n//         err: 'The signature does not match the signed report',\n//       };\n//     }\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to verify the report signature: ' + e,\n//     };\n//   }\n//\n//   let caStore;\n//\n//   try {\n//     caStore = pki.createCaStore([INTEL_CA]);\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to load CA certificate: ' + e,\n//     };\n//   }\n//\n//   try {\n//     pki.verifyCertificateChain(caStore, [cert]);\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to verify certificate: ' + e,\n//     };\n//   }\n//\n//   const address = parseAddress(report);\n//\n//   if (address !== signer) {\n//     return {\n//       verified: false,\n//       err: 'Signer address does not match the report: ' + signer + ' != ' +\n//         address,\n//     };\n//   }\n//\n//   return {verified: true, err: undefined};\n// }\n\n// /**\n//  * Encode secret contract function arguments\n//  *\n//  * @param {Object} args\n//  * @return {string}\n//  */\n// function encodeArguments(args) {\n//   return '0x' + RLP.encode(args).toString('hex');\n// }\n\n/**\n * Generate a taskId using a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {string} sender\n * @param {Number} nonce\n * @return {string}\n */\nfunction generateScAddr(sender, nonce) {\n  return web3Utils.soliditySha3(\n    {t: 'bytes', v: sender},\n    {t: 'uint', v: nonce},\n  );\n}\n\n/**\n * Generate a taskId using a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {string} hexStr\n * @param {Array} inputsArray\n * @return {string}\n */\nfunction appendMessages(hexStr, inputsArray) {\n  for (let input of inputsArray) {\n    input = remove0x(input);\n    // since the inputs are in hex string, they are twice as long as their bytes\n    hexStr += JSBI.BigInt(input.length/2).toString(16).padStart(16, '0') + input;\n  }\n  return hexStr;\n}\n\n/**\n * Generate a taskId using a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {string} hexStr\n * @param {Array} inputsArray\n * @return {string}\n */\nfunction appendArrayMessages(hexStr, inputsArray) {\n  for (let array of inputsArray) {\n    hexStr += JSBI.BigInt(array.length).toString(16).padStart(16, '0');\n    hexStr = appendMessages(hexStr, array);\n  }\n  return hexStr;\n}\n\n/**\n * Generate a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {array} inputsArray\n * @return {string} hash of inputs\n */\nfunction hash(inputsArray) {\n  let hexStr = appendMessages('', inputsArray);\n  return web3Utils.soliditySha3({t: 'bytes', v: hexStr});\n}\n\n/**\n * Generate a taskId using a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {Number} seed\n * @param {Number} nonce\n * @param {Array} workerAddresses\n * @param {Array} workerStakes\n * @return {string} hash of inputs\n */\nfunction principalHash(seed, nonce, workerAddresses, workerStakes) {\n  let hexStr = '';\n  hexStr = appendMessages(hexStr, [seed, nonce]);\n  hexStr = appendArrayMessages(hexStr, [workerAddresses, workerStakes]);\n  return web3Utils.soliditySha3({t: 'bytes', v: hexStr});\n}\n\n/**\n * Generate a taskId using a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {string} codeHash\n * @param {Array} inputsHashes\n * @param {string} lastStateDeltaHash\n * @param {Array} stateDeltaHashes\n * @param {Array} outputHashes\n * @param {Array} gasesUsed\n * @param {string} optionalEthereumData\n * @param {string} optionalEthereumContractAddress\n * @param {string} successFlag\n * @return {string} hash of inputs\n */\nfunction commitReceiptsHash(codeHash, inputsHashes, lastStateDeltaHash, stateDeltaHashes, outputHashes, gasesUsed,\n                            optionalEthereumData, optionalEthereumContractAddress, successFlag) {\n  let hexStr = '';\n  hexStr = appendMessages(hexStr, [codeHash]);\n  hexStr = appendArrayMessages(hexStr, [inputsHashes]);\n  hexStr = appendMessages(hexStr, [lastStateDeltaHash]);\n  hexStr = appendArrayMessages(hexStr, [stateDeltaHashes, outputHashes, gasesUsed]);\n  hexStr = appendMessages(hexStr, [optionalEthereumData, optionalEthereumContractAddress, successFlag]);\n\n  return web3Utils.soliditySha3({t: 'bytes', v: hexStr});\n}\n\n// /**\n//  * RLP encode report parts\n//  *\n//  * @param {string} report\n//  * @param {string} cert\n//  * @param {string} sig\n//  * @return {string}\n//  */\n// function encodeReport(report, cert, sig) {\n//   return '0x' + RLP.encode([report, cert, sig]).toString('hex');\n// }\n\n// /**\n//  * Verifies that the specified method signature matches the specs defined\n//  * by the Ethereum abi: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n//  *\n//  * @param {string} methodSig\n//  * @return {boolean}\n//  */\n// function checkMethodSignature(methodSig) {\n//   const rx = /\\b\\((.*?)\\)/g;\n//   const result = rx.test(methodSig);\n//\n//   return result;\n// }\n\n// /**\n//  * Generate an Ethereum-like address from a public key\n//  *\n//  * @param {string} publicKey\n//  * @return {string}\n//  */\n// function toAddress(publicKey) {\n//   const address = EthCrypto.publicKey.toAddress(publicKey);\n//\n//   return address;\n// }\n\n// /**\n//  * Sign a message with the specified private key\n//  *\n//  * @param {string} privateKey\n//  * @param {string} message\n//  * @return {string}\n//  */\n// function sign(privateKey, message) {\n//   return EthCrypto.sign(\n//     privateKey,\n//     message,\n//   );\n// }\n\n// /**\n//  * Returns the address with which the message was signed\n//  *\n//  * @param {string} signature\n//  * @param {string} message\n//  * @return {string}\n//  */\n// function recover(signature, message) {\n//   return EthCrypto.recover(\n//     signature,\n//     message,\n//   );\n// }\n\n// /**\n//  * Returns the public key associated with the message signature\n//  *\n//  * @param {string} signature\n//  * @param {string} message\n//  * @return {string} Public key\n//  */\n// function recoverPublicKey(signature, message) {\n//   return EthCrypto.recoverPublicKey(\n//     signature,\n//     message,\n//   );\n// }\n\n/**\n * This does ECDH key derivation from 2 EC secp256k1 keys.\n * It does so by multiplying the public points by the private point of the over key.\n * This results in a X and Y. it then replaces the Y with 0x02 if Y is even and 0x03 if it's odd.\n * Then it hashes the new Y together with the X using SHA256.\n * Multiplication: https://github.com/indutny/elliptic/blob/master/lib/elliptic/ec/key.js#L104\n * Replacing Y: https://source.that.world/source/libsecp256k1-rs/browse/master/src/ecdh.rs$25\n *\n * @param {string} enclavePublicKey\n * @param {string} clientPrivateKey\n * @return {string}\n */\nfunction getDerivedKey(enclavePublicKey, clientPrivateKey) {\n  let ec = new EC('secp256k1');\n\n  if (enclavePublicKey.length == 128) {\n    enclavePublicKey = '04' + enclavePublicKey;\n  }\n\n  let clientKey = ec.keyFromPrivate(clientPrivateKey, 'hex');\n  let enclaveKey = ec.keyFromPublic(enclavePublicKey, 'hex');\n\n  let sharedPoints = enclaveKey.getPublic().mul(clientKey.getPrivate());\n  let y = 0x02 | (sharedPoints.getY().isOdd() ? 1 : 0);\n  let x = sharedPoints.getX();\n  let yBuffer = Buffer.from([y]);\n  let xBuffer = x.toArrayLike(Buffer, 'be', 32);\n\n  let sha256 = forge.md.sha256.create();\n\n  sha256.update(yBuffer.toString('binary'));\n  sha256.update(xBuffer.toString('binary'));\n\n  return sha256.digest().toHex();\n}\n\n/**\n * Decrypts the encrypted message:\n * Message format: encrypted_message[*]tag[16]iv[12] (represented as: var_name[len])\n *\n * @param {string} keyHex\n * @param {string} msgHex\n * @return {string}\n */\nfunction decryptMessage(keyHex, msgHex) {\n  let key = forge.util.hexToBytes(keyHex);\n  let msgBuf = Buffer.from(msgHex, 'hex');\n  let iv = forge.util.createBuffer(msgBuf.slice(-12));\n  let tag = forge.util.createBuffer(msgBuf.slice(-28, -12));\n  const decipher = forge.cipher.createDecipher('AES-GCM', key);\n\n  decipher.start({iv: iv, tag: tag});\n  decipher.update(\n    forge.util.createBuffer(msgBuf.slice(0, -28)));\n\n  if (decipher.finish()) {\n    return decipher.output.toHex();\n  }\n  throw new Error('decipher did not finish');\n}\n\n/**\n * Encrypts a message using the provided key.\n * Returns an encrypted message in this format:\n * encrypted_message[*]tag[16]iv[12] (represented as: var_name[len])\n *\n * @param {string} keyHex\n * @param {string} msg\n * @param {string} iv\n * @return {string}\n */\nfunction encryptMessage(keyHex, msg, iv = forge.random.getBytesSync(12)) {\n  let key = forge.util.hexToBytes(keyHex);\n  const cipher = forge.cipher.createCipher('AES-GCM', key);\n\n  cipher.start({iv: iv});\n  cipher.update(forge.util.createBuffer(msg));\n  cipher.finish();\n\n  let result = cipher.output.putBuffer(cipher.mode.tag).putBytes(iv);\n\n  return result.toHex();\n}\n\n/**\n * Converts ENG value to grains format.\n *\n * @param {int} engValue\n * @return {int}\n */\nfunction toGrains(engValue) {\n  return engValue * 10**8;\n}\n\n// /**\n//  * Converts grains format to ENG value.\n//  *\n//  * @param {int} grains\n//  * @return {int}\n//  */\n// function fromGrains(grains) {\n//   return grains / 10**8;\n// }\n\n/**\n * Removes '0x' from a hex string, if present\n *\n * @param {string} hexString\n * @return {string}\n */\nfunction remove0x(hexString) {\n  if (hexString.substring(0, 2) == '0x') {\n    return hexString.substring(2);\n  } else {\n    return hexString;\n  }\n}\n\n/**\n * Converts a hex string to its ASCII representation\n *\n * @param {string} hexString\n * @return {string}\n */\nfunction hexToAscii(hexString) {\n  if (!(typeof hexString === 'number' || typeof hexString == 'string')) {\n    return '';\n  }\n  hexString = hexString.toString().replace(/\\s+/gi, '');\n  const stack = [];\n  for (let n = 0; n < hexString.length; n += 2) {\n    const code = parseInt(hexString.substr(n, 2), 16);\n    if (!isNaN(code) && code !== 0) {\n      stack.push(String.fromCharCode(code));\n    }\n  }\n  return stack.join('');\n}\n\n/**\n * Sleeps\n *\n * @param {int} ms\n * @return {undefined}\n */\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n\nlet utils = {};\n\n// utils.readCert = readCert;\n// utils.encodeReport = encodeReport;\nutils.test = () => 'hello2';\n// utils.encodeArguments = encodeArguments;\nutils.generateScAddr = generateScAddr;\nutils.hash = hash;\nutils.principalHash = principalHash;\nutils.commitReceiptsHash = commitReceiptsHash;\n// utils.verifyWorker = verifyWorker;\n// utils.checkMethodSignature = checkMethodSignature;\n// utils.toAddress = toAddress;\n// utils.sign = sign;\n// utils.recover = recover;\n// utils.recoverPublicKey = recoverPublicKey;\nutils.getDerivedKey = getDerivedKey;\nutils.encryptMessage = encryptMessage;\nutils.decryptMessage = decryptMessage;\nutils.toGrains = toGrains;\n// utils.fromGrains = fromGrains;\nutils.remove0x = remove0x;\nutils.hexToAscii = hexToAscii;\nutils.sleep = sleep;\n\nexport default utils;\n","export const ERROR = 'error';\nexport const DEPOSIT_TRANSACTION_HASH = 'depositTransactionHash';\nexport const DEPOSIT_CONFIRMATION = 'depositConfirmation';\nexport const DEPOSIT_RECEIPT = 'depositReceipt';\nexport const WITHDRAW_TRANSACTION_HASH = 'withdrawTransactionHash';\nexport const WITHDRAW_CONFIRMATION = 'withdrawConfirmation';\nexport const WITHDRAW_RECEIPT = 'withdrawReceipt';\nexport const LOGIN_TRANSACTION_HASH = 'loginTransactionHash';\nexport const LOGIN_CONFIRMATION = 'loginConfirmation';\nexport const LOGIN_RECEIPT = 'loginReceipt';\nexport const LOGOUT_TRANSACTION_HASH = 'logoutTransactionHash';\nexport const LOGOUT_CONFIRMATION = 'logoutConfirmation';\nexport const LOGOUT_RECEIPT = 'logoutReceipt';\n\nexport const DEPLOY_SC_ADDR_RESULT = 'deploySCAddrResult';\nexport const DEPLOY_SC_ETH_TRANSACTION_HASH = 'deploySCEthTransactionHash';\nexport const DEPLOY_SC_ETH_CONFIRMATION = 'deploySCEthConfirmation';\nexport const DEPLOY_SC_ETH_RECEIPT = 'deploySCEthReceipt';\nexport const DEPLOY_SC_ENG_RECEIPT = 'deploySCEngReceipt';\n\nexport const CREATE_TASK = 'createTask';\nexport const CREATE_TASK_INPUT = 'createTaskInput';\nexport const CREATE_TASK_RECORD_TRANSACTION_HASH = 'createTaskRecordTransactionHash';\nexport const CREATE_TASK_RECORD_CONFIRMATION = 'createTaskRecordConfirmation';\nexport const CREATE_TASK_RECORD_RECEIPT = 'createTaskRecordReceipt';\nexport const CREATE_TASK_RECORD = 'createTaskRecord';\nexport const CREATE_TASK_RECORDS_TRANSACTION_HASH = 'createTaskRecordsTransactionHash';\nexport const CREATE_TASK_RECORDS_CONFIRMATION = 'createTaskRecordsConfirmation';\nexport const CREATE_TASK_RECORDS_RECEIPT = 'createTaskRecordsReceipt';\nexport const CREATE_TASK_RECORDS = 'createTaskRecords';\n\nexport const SEND_TASK_INPUT_RESULT = 'sendTaskInputResult';\nexport const POLL_TASK_STATUS_RESULT = 'pollTaskStatusResult';\nexport const GET_TASK_RESULT_RESULT = 'getTaskResultResult';\nexport const DEPLOY_SECRET_CONTRACT_RESULT = 'deploySecretContractResult';\n","import EventEmitter from 'eventemitter3';\nimport * as eeConstants from './emitterConstants';\n\n/**\n * Encapsulates the admin operations\n */\nexport default class Admin {\n  /**\n   * Constructor\n   * @param {Web3} web3 - Web3 provider for the library\n   * @param {Web3.Contract} enigmaContract - Enigma contract deployed to Ethereum\n   * @param {Web3.Contract} tokenContract - Enigma token contract deployed to Ethereum\n   * @param {Object} txDefaults\n   * @param {Enigma} enigma - Enigma wrapper instance\n   */\n  constructor(web3, enigmaContract, tokenContract, txDefaults, enigma) {\n    this.web3 = web3;\n    this.enigmaContract = enigmaContract;\n    this.tokenContract = tokenContract;\n    this.txDefaults = txDefaults;\n    this.enigma = enigma;\n  }\n\n  /**\n   * Find worker by signing address\n   *\n   * @param {string} sigAddr - The signing address\n   * @return {Promise}\n   */\n  async findBySigningAddress(sigAddr) {\n    const result = await this.enigmaContract.methods.getWorkerFromSigningAddress(sigAddr).call();\n    return {\n      account: result[0],\n      status: parseInt(result[1][1]),\n      report: result[1][2],\n      balance: parseInt(result[1][3]),\n      logs: result[1][4],\n    };\n  }\n\n  /**\n   * Get the worker's status\n   *\n   * @param {string} account - Worker's address\n   * @return {Promise} Resolves to status of worker (0=Unregistered, 1=Registered, 2=LoggedIn, 3=LoggedOut)\n   */\n  async getWorkerStatus(account) {\n    const worker = await this.enigmaContract.methods.getWorker(account).call();\n    return parseInt(worker.status);\n  }\n\n  /**\n   * Checks if a secret contract is deployed\n   *\n   * @param {string} scAddr - Secret contract address\n   * @return {Promise} Resolves to a boolean value whether the contract has been deployed or not\n   */\n  async isDeployed(scAddr) {\n    return parseInt((await this.enigmaContract.methods.getSecretContract(scAddr).call()).status) === 1;\n  }\n\n  /**\n   * Fetches the secret contract bytecode hash\n   *\n   * @param {string} scAddr - Secret contract address\n   * @return {Promise} - Resolves to the bytecode hash of the deployed secret contract\n   */\n  async getCodeHash(scAddr) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).codeHash;\n  }\n\n  /**\n   * Count the state deltas for the specified secret contract.\n   *\n   * @param {string} scAddr - Secret contract address\n   * @return {Promise} - Resolves to count of state deltas\n   */\n  async countStateDeltas(scAddr) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes.length;\n  }\n\n  /**\n   * Fetch the state delta hash at the specified index position\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {number} index - Index of state delta hash to retrieve\n   * @return {Promise} - Resolves to state delta hash at the specified position\n   */\n  async getStateDeltaHash(scAddr, index) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes[index];\n  }\n\n  /**\n   * Fetch state delta hashes in the specified range\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {number} start - Start index of state delta hash to retrieve (inclusive)\n   * @param {number} stop - Stop index of state delta hash to retrieve (exclusive)\n   * @return {Promise} - Resolves to the state delta hashes in the specified range\n   */\n  async getStateDeltaHashes(scAddr, start, stop) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes.slice(start, stop);\n  }\n\n  /**\n   * Check that the specified state delta hash is valid.\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {string} stateDeltaHash\n   * @return {Promise} Resolves to boolean value for whether the state delta hash is valid\n   */\n  async isValidDeltaHash(scAddr, stateDeltaHash) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes.includes(\n      stateDeltaHash);\n  }\n\n  /**\n   * Login the selected worker\n   *\n   * @param {string} account\n   * @return {EventEmitter} EventEmitter to be listened to track login transaction\n   */\n  login(account) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        await this.enigmaContract.methods.login().send({from: account}).on('transactionHash', (hash) => {\n          emitter.emit(eeConstants.LOGIN_TRANSACTION_HASH, hash);\n        }).on('confirmation', (confirmationNumber, receipt) => {\n          emitter.emit(eeConstants.LOGIN_CONFIRMATION, confirmationNumber, receipt);\n        }).on('receipt', (receipt) => {\n          emitter.emit(eeConstants.LOGIN_RECEIPT, receipt);\n        });\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Logout the selected worker\n   *\n   * @param {string} account\n   * @return {EventEmitter} EventEmitter to be listened to track logout transaction\n   */\n  logout(account) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        await this.enigmaContract.methods.logout().send({from: account}).on('transactionHash', (hash) => {\n          emitter.emit(eeConstants.LOGOUT_TRANSACTION_HASH, hash);\n        }).on('confirmation', (confirmationNumber, receipt) => {\n          emitter.emit(eeConstants.LOGOUT_CONFIRMATION, confirmationNumber, receipt);\n        }).on('receipt', (receipt) => {\n          emitter.emit(eeConstants.LOGOUT_RECEIPT, receipt);\n        });\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Deposit ENG tokens in the worker's bank\n   *\n   * @param {string} account - Worker's address\n   * @param {number} amount - Number of ENG tokens to deposit, in grains (10**8 multiplier) format\n   * @return {EventEmitter} EventEmitter to be listened to track deposit transaction\n   */\n  deposit(account, amount) {\n    let emitter = new EventEmitter();\n    (async () => {\n      const balance = await this.tokenContract.methods.balanceOf(account).call();\n      if (balance < amount) {\n        const msg = 'Not enough tokens in wallet';\n        emitter.emit('error', {\n          name: 'NotEnoughTokens',\n          message: msg,\n        });\n        return;\n      }\n      await this.tokenContract.methods.approve(this.enigmaContract.options.address, amount).send({from: account});\n      try {\n        const receipt = await this.enigmaContract.methods.deposit(account, amount).\n          send({from: account}).\n          on('transactionHash', (hash) => {\n            emitter.emit(eeConstants.DEPOSIT_TRANSACTION_HASH, hash);\n          }).\n          on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.DEPOSIT_CONFIRMATION, confirmationNumber, receipt);\n          });\n        emitter.emit(eeConstants.DEPOSIT_RECEIPT, receipt);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Withdraw ENG tokens from the worker's bank\n   *\n   * @param {string} account - Worker's address\n   * @param {number} amount - Number of ENG tokens to deposit, in grains (10**8 multiplier) format\n   * @return {EventEmitter} EventEmitter to be listened to track deposit transaction\n   */\n  withdraw(account, amount) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        await this.enigmaContract.methods.withdraw(amount).\n          send({from: account}).\n          on('transactionHash', (hash) => {\n            emitter.emit(eeConstants.WITHDRAW_TRANSACTION_HASH, hash);\n          }).\n          on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.WITHDRAW_CONFIRMATION, confirmationNumber, receipt);\n          }).\n          on('receipt', (receipt) => {\n            emitter.emit(eeConstants.WITHDRAW_RECEIPT, receipt);\n          });\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Get token balance for worker\n   *\n   * @param {string} account - Worker's address\n   * @return {Promise} Resolves to ENG token balance in grains (10**8 multiplier) format\n   */\n  async getBalance(account) {\n    return parseInt((await this.enigmaContract.methods.getWorker(account).call()).balance);\n  }\n\n  /**\n   * Get worker's signer address\n   *\n   * @param {string} account - Worker's address\n   * @return {Promise} Resolves to worker's signer address\n   */\n  async getWorkerSignerAddr(account) {\n    return (await this.enigmaContract.methods.getWorker(account).call()).signer;\n  }\n}\n","import utils from '../enigma-utils';\n\n/**\n * Encapsulates the Task\n */\nexport default class Task {\n  /**\n   * Task wrapper for contract deployment and regular tasks. This object is iteratively built up during the task\n   * lifecycle\n   *\n   * @param {string} scAddr\n   * @param {string} encryptedFn\n   * @param {string} encryptedAbiEncodedArgs\n   * @param {Number} gasLimit\n   * @param {Number} gasPx\n   * @param {string} msgId\n   * @param {string} userPubKey\n   * @param {Number} firstBlockNumber\n   * @param {string} workerAddress\n   * @param {string} workerEncryptionKey\n   * @param {string} sender\n   * @param {string} userTaskSig\n   * @param {Number} nonce\n   * @param {string} preCode\n   * @param {string} preCodeHash\n   * @param {boolean} isContractDeploymentTask\n   */\n  constructor(scAddr, encryptedFn, encryptedAbiEncodedArgs, gasLimit, gasPx, msgId, userPubKey, firstBlockNumber,\n              workerAddress, workerEncryptionKey, sender, userTaskSig, nonce, preCode, preCodeHash,\n              isContractDeploymentTask) {\n    // Initial task attributes\n    this.inputsHash = utils.hash([encryptedFn, encryptedAbiEncodedArgs,\n      isContractDeploymentTask ? preCodeHash : scAddr, userPubKey]);\n    this.scAddr = scAddr;\n    this.encryptedFn = encryptedFn;\n    this.encryptedAbiEncodedArgs = encryptedAbiEncodedArgs;\n    this.gasLimit = gasLimit;\n    this.gasPx = gasPx;\n    this.msgId = msgId;\n    this.userPubKey = userPubKey;\n    this.firstBlockNumber = firstBlockNumber;\n    this.workerAddress = workerAddress;\n    this.workerEncryptionKey = workerEncryptionKey;\n    this.sender = sender;\n    this.userTaskSig = userTaskSig;\n    this.nonce = nonce;\n    this.preCode = preCode;\n    this.preCodeHash = preCodeHash;\n    this.isContractDeploymentTask = isContractDeploymentTask;\n\n    // Attributes added to task when task record is created on ETH, most critically, the taskId (a unique value\n    // for each task computed from hash(hash(encrypted function signature, encrypted ABI-encoded arguments, gas limit,\n    // gas price, user's ETH address), user's nonce value monotonically increasing for every task deployment)\n    this.transactionHash = '';\n    this.taskId = '';\n    this.receipt = '';\n    this.ethStatus = 0;\n    this.proof = '';\n    this.creationBlockNumber = -1;\n\n    // Attributes added to task when computation result is being polled/retrieved from the ENG network\n    this.encryptedAbiEncodedOutputs = '';\n    this.delta = '';\n    this.usedGas = '';\n    this.ethereumPayload = '';\n    this.ethereumAddress = '';\n    this.workerTaskSig = '';\n    this.engStatus = 'null';\n\n    this.decryptedOutput = '';\n  }\n}\n","/* eslint-disable prefer-spread,prefer-rest-params,valid-jsdoc */\nimport EnigmaContract from '../../build/contracts/Enigma';\nimport EnigmaTokenContract from '../../build/contracts/EnigmaToken';\nimport Admin from './Admin';\nimport Task from './models/Task';\nimport EventEmitter from 'eventemitter3';\nimport web3Utils from 'web3-utils';\nimport jaysonBrowserClient from 'jayson/lib/client/browser';\nimport axios from 'axios';\nimport utils from './enigma-utils';\nimport forge from 'node-forge';\nimport JSBI from 'jsbi';\nimport * as abi from 'ethereumjs-abi';\nimport EthCrypto from 'eth-crypto';\nimport * as eeConstants from './emitterConstants';\n\n/**\n * Class encapsulation the Enigma operations.\n */\nexport default class Enigma {\n  /**\n   * The Enigma JS library constructor - a wrapper for Ethereum's Web3 library, offering additional services to\n   * leverage the Enigma protocol's unique features.\n   *\n   * @param {Web3} web3 - Web3 provider for the library\n   * @param {string} enigmaContractAddr - Address the Enigma contract is deployed to on Ethereum\n   * @param {string} tokenContractAddr - Address the Enigma token contract is deployed to on Ethereum\n   * @param {string} rpcAddr - Enigma p2p network address for RPC calls\n   * @param {Object} txDefaults\n   */\n  constructor(web3, enigmaContractAddr, tokenContractAddr, rpcAddr, txDefaults = {}) {\n    this.web3 = web3;\n    this.txDefaults = txDefaults;\n    // axios callback for jayson rpc client to interface with ENG network\n    let callServer = function(request, callback) {\n      let config = {\n        headers: {\n          'Content-Type': 'application/json',\n          'credentials': 'include',\n        },\n      };\n      axios.post(rpcAddr, JSON.parse(request), config).then((response) => {\n        if (eeConstants.ERROR in response.data) {\n          callback(response.data.error, null);\n        } else {\n          let text = JSON.stringify(response.data.result);\n          callback(null, text);\n        }\n      }).catch(function(err) {\n        callback({code: -32000, message: err.message}, null);\n      });\n    };\n    this.client = jaysonBrowserClient(callServer, {});\n    this.workerParamsCache = {};\n    this.selectedWorkerGroupCache = {};\n    this.createContracts(enigmaContractAddr, tokenContractAddr);\n  }\n\n  /**\n   * Initialize the worker-specific admin features\n   */\n  admin() {\n    this.admin = new Admin(this.web3, this.enigmaContract, this.tokenContract, this.txDefaults, this);\n  }\n\n  /**\n   * Initialize the Enigma and Enigma token contracts\n   *\n   * @param {string} enigmaContractAddr\n   * @param {string} tokenContractAddr\n   */\n  createContracts(enigmaContractAddr, tokenContractAddr) {\n    this.enigmaContract = new this.web3.eth.Contract(EnigmaContract['abi'],\n      enigmaContractAddr, this.txDefaults);\n    this.tokenContract = new this.web3.eth.Contract(EnigmaTokenContract['abi'],\n      tokenContractAddr, this.txDefaults);\n  }\n\n  /**\n   * Create a base Task - a wrapper for a task (either contract deployments or regular tasks)\n   *\n   * @param {string} fn - Function name\n   * @param {Array} args - Inputs for task in the form of [[arg1, '<type>'], ..., [argn, '<type>']]\n   *\n   * @param {Number} gasLimit - ENG gas limit for task computation\n   * @param {Number} gasPx - ENG gas price for task computation\n   * @param {string} sender - ETH address for task sender\n   * @param {string} scAddrOrPreCode - Either secret contract address or precode, depending on if user is running a\n   * contract deployment or regular task\n   * @param {boolean} isContractDeploymentTask - Is this task a contract deployment task (if not, it's a regular task)\n   * @return {Task} Task with base attributes to be used for remainder of task lifecycle\n   */\n  createTask(fn, args, gasLimit, gasPx, sender, scAddrOrPreCode, isContractDeploymentTask) {\n    let emitter = new EventEmitter();\n    (async () => {\n      // TODO: never larger that 53-bit?\n      const nonce = parseInt(await this.enigmaContract.methods.getUserTaskDeployments(sender).call());\n      const scAddr = isContractDeploymentTask ? utils.generateScAddr(sender, nonce) : scAddrOrPreCode;\n      const preCode = isContractDeploymentTask ? scAddrOrPreCode : '';\n\n      let preCodeArray = [];\n      for (let n = 0; n < preCode.length; n += 2) {\n        preCodeArray.push(parseInt(preCode.substr(n, 2), 16));\n      }\n\n      const preCodeHash = isContractDeploymentTask ?\n        this.web3.utils.soliditySha3({t: 'bytes', value: scAddrOrPreCode}) : '';\n      const argsTranspose = (args === undefined || args.length === 0) ? [[], []] :\n        args[0].map((col, i) => args.map((row) => row[i]));\n      const abiEncodedArgs = utils.remove0x(this.web3.eth.abi.encodeParameters(argsTranspose[1], argsTranspose[0]));\n      let abiEncodedArgsArray = [];\n      for (let n = 0; n < abiEncodedArgs.length; n += 2) {\n        abiEncodedArgsArray.push(parseInt(abiEncodedArgs.substr(n, 2), 16));\n      }\n      const blockNumber = await this.web3.eth.getBlockNumber();\n      const workerParams = await this.getWorkerParams(blockNumber);\n      const firstBlockNumber = workerParams.firstBlockNumber;\n      let workerAddress = await this.selectWorkerGroup(scAddr, workerParams, 1)[0]; // TODO: tmp fix 1 worker\n      workerAddress = workerAddress.toLowerCase().slice(-40); // remove leading '0x' if present\n      const {publicKey, privateKey} = this.obtainTaskKeyPair();\n      try {\n        const getWorkerEncryptionKeyResult = await new Promise((resolve, reject) => {\n          this.client.request('getWorkerEncryptionKey',\n            {workerAddress: workerAddress, userPubKey: publicKey}, (err, response) => {\n              if (err) {\n                reject(err);\n                return;\n              }\n              resolve(response);\n            });\n        });\n        const {result, id} = getWorkerEncryptionKeyResult;\n        const {workerEncryptionKey, workerSig} = result;\n\n        // The signature of the workerEncryptionKey is generated\n        // concatenating the following elements in a bytearray:\n        // len('Enigma User Message') + b'Enigma User Message' + len(workerEncryptionKey) + workerEncryptionKey\n        // Because the first 3 elements are constant, they are hardcoded as follows:\n        // len('Enigma User Message') as a uint64 => 19 in hex => 0000000000000013\n        // bytes of 'Enigma User Message' in hex => 456e69676d612055736572204d657373616765\n        // len(workerEncryptionKey) as a unit64 => 64 in hex => 0000000000000040\n        const hexToVerify = '0x0000000000000013456e69676d612055736572204d6573736167650000000000000040' +\n          workerEncryptionKey;\n\n        // the hashing function soliditySha3 expects hex instead of bytes\n        let recAddress = EthCrypto.recover('0x'+workerSig,\n          this.web3.utils.soliditySha3({t: 'bytes', value: hexToVerify}));\n\n        recAddress = recAddress.toLowerCase().slice(-40); // remove leading '0x' if present\n\n        if (workerAddress !== recAddress) {\n          console.error('Worker address', workerAddress, '!= recovered address', recAddress);\n          emitter.emit(eeConstants.ERROR, {\n            name: 'InvalidWorker',\n            message: `Invalid worker encryption key + signature combo ${workerAddress} != ${recAddress}`,\n          });\n        } else {\n          // Generate derived key from worker's encryption key and user's private key\n          const derivedKey = utils.getDerivedKey(workerEncryptionKey, privateKey);\n          // Encrypt function and ABI-encoded args\n          const encryptedFn = utils.encryptMessage(derivedKey, fn);\n          const encryptedAbiEncodedArgs = utils.encryptMessage(derivedKey, Buffer.from(abiEncodedArgsArray));\n          const msg = this.web3.utils.soliditySha3(\n            {t: 'bytes', v: encryptedFn},\n            {t: 'bytes', v: encryptedAbiEncodedArgs},\n          );\n          const userTaskSig = await this.web3.eth.sign(msg, sender);\n          emitter.emit(eeConstants.CREATE_TASK, new Task(scAddr, encryptedFn, encryptedAbiEncodedArgs, gasLimit, gasPx,\n            id, publicKey, firstBlockNumber, workerAddress, workerEncryptionKey, sender, userTaskSig, nonce,\n            preCodeArray, preCodeHash, isContractDeploymentTask));\n        }\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Create and store a task record on chain (ETH). Task records are necessary for collecting the ENG computation fee\n   * and computing the immutable taskId (a unique value for each task computed from hash(hash(encrypted function\n   * signature, encrypted ABI-encoded arguments, gas limit, gas price, user's public key), user's nonce value\n   * monotonically increasing for every task deployment). Thus, task records have important implications for task\n   * ordering, fee payments, and verification.\n   *\n   * @param {Task} task - Task wrapper for contract deployment and regular tasks\n   * @returns {EventEmitter} EventEmitter to be listened to track creation of task record. Emits a Task with task\n   * record creation attributes to be used for remainder of task lifecycle\n   */\n  createTaskRecord(task) {\n    let emitter = new EventEmitter();\n    (async () => {\n      const balance = await this.tokenContract.methods.balanceOf(task.sender).call();\n      if (balance < (task.gasLimit * task.gasPx)) {\n        emitter.emit(eeConstants.ERROR, {\n          name: 'NotEnoughTokens',\n          message: 'Not enough tokens to pay the fee',\n        });\n        return;\n      }\n      await this.tokenContract.methods.approve(this.enigmaContract.options.address, task.gasLimit * task.gasPx).send({\n        from: task.sender,\n      });\n      try {\n        const receipt = task.isContractDeploymentTask ?\n          await this.enigmaContract.methods.createDeploymentTaskRecord(task.inputsHash, task.gasLimit,\n            task.gasPx, task.firstBlockNumber, task.nonce).send({\n            from: task.sender,\n          }).on('transactionHash', (hash) => {\n            task.transactionHash = hash;\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_TRANSACTION_HASH, hash);\n          }).on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_CONFIRMATION, confirmationNumber, receipt);\n          })\n          :\n          await this.enigmaContract.methods.createTaskRecord(task.inputsHash, task.gasLimit, task.gasPx,\n            task.firstBlockNumber).send({\n            from: task.sender,\n          }).on('transactionHash', (hash) => {\n            task.transactionHash = hash;\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_TRANSACTION_HASH, hash);\n          }).on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_CONFIRMATION, confirmationNumber, receipt);\n          });\n        task.taskId = receipt.events.TaskRecordCreated.returnValues.taskId;\n        task.receipt = receipt;\n        task.ethStatus = 1;\n        task.creationBlockNumber = receipt.blockNumber;\n        emitter.emit(eeConstants.CREATE_TASK_RECORD_RECEIPT, receipt);\n        emitter.emit(eeConstants.CREATE_TASK_RECORD, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Create and store task records on chain (ETH). Task records are necessary for collecting the ENG computation fee\n   * and computing the immutable taskId (a unique value for each task computed from hash(hash(encrypted function\n   * signature, encrypted ABI-encoded arguments, gas limit, gas price, user's public key), user's nonce value\n   * monotonically increasing for every task deployment). Thus, task records have important implications for task\n   * ordering, fee payments, and verification.\n   *\n   * @param {Array} tasks - Task wrappers for contract deployment and regular tasks\n   * @returns {EventEmitter} EventEmitter to be listened to track creation of task records. Emits Tasks with task\n   * record creation attributes to be used for remainder of task lifecycle\n   */\n  createTaskRecords(tasks) {\n    let emitter = new EventEmitter();\n    (async () => {\n      const inputsHashes = tasks.map((task) => task.inputsHash);\n      const gasLimits = tasks.map((task) => task.gasLimit);\n      const gasPxs = tasks.map((task) => task.gasPx);\n      const fees = tasks.map((task) => task.gasLimit * task.gasPx);\n      const balance = await this.tokenContract.methods.balanceOf(tasks[0].sender).call();\n      const totalFees = fees.reduce((a, b) => a + b, 0);\n      if (balance < totalFees) {\n        emitter.emit(eeConstants.ERROR, {\n          name: 'NotEnoughTokens',\n          message: 'Not enough tokens to pay the fee',\n        });\n        return;\n      }\n      await this.tokenContract.methods.approve(this.enigmaContract.options.address, totalFees).send({\n        from: tasks[0].sender,\n      });\n      await this.enigmaContract.methods.createTaskRecords(inputsHashes, gasLimits, gasPxs, tasks[0].firstBlockNumber).\n        send({\n          from: tasks[0].sender,\n        }).\n        on('transactionHash', (hash) => {\n          for (let i = 0; i < tasks.length; i++) {\n            tasks[i].transactionHash = hash;\n          }\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS_TRANSACTION_HASH, hash);\n        }).\n        on('confirmation', (confirmationNumber, receipt) => {\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS_CONFIRMATION, confirmationNumber, receipt);\n        }).\n        then((receipt) => {\n          const taskIds = receipt.events.TaskRecordsCreated.returnValues.taskIds;\n          for (let i = 0; i < tasks.length; i++) {\n            tasks[i].taskId = taskIds[i];\n            tasks[i].receipt = receipt;\n            tasks[i].ethStatus = 1;\n            tasks[i].creationBlockNumber = receipt.blockNumber;\n          }\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS_RECEIPT, receipt);\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS, tasks);\n        });\n    })();\n    return emitter;\n  }\n\n  /**\n   * Get the Task's task record status from Ethereum\n   *\n   * @param {Task} task - Task wrapper for contract deployment and regular tasks\n   * @return {Promise} Resolves to Task wrapper with updated ethStatus and proof properties\n   */\n  async getTaskRecordStatus(task) {\n    const result = await this.enigmaContract.methods.getTaskRecord(task.taskId).call();\n    task.ethStatus = parseInt(result.status);\n    task.proof = result.proof;\n    return task;\n  }\n\n  /**\n   * Fetch output hash at specified index position\n   *\n   * @param {Task} task - Task wrapper\n   * @return {Promise} - Resolves to output hash at the specified position\n   */\n  async getTaskOutputHash(task) {\n    return (await this.enigmaContract.methods.getTaskRecord(task.taskId).call()).outputHash;\n  }\n\n  /**\n   * Find SGX report\n   *\n   * @param {string} custodian - Worker's address\n   * @return {Promise} Resolves to SGX report for the worker\n   */\n  async getReport(custodian) {\n    return await this.enigmaContract.methods.getReport(custodian).call();\n  }\n\n  /**\n   * Given a block number, obtain the worker parameters. These parameters remain the same for a given secret\n   * contract and epoch (fixed number of blocks). These parameters are cached until the epoch changes.\n   *\n   * @param {int} blockNumber - Block number of task record's mining\n   * @return {Promise} Resolves to the worker params, which includes a seed (random int generated from the principal\n   * node), first block number for the epoch, list of active work addresses (ordered list of workers that were logged\n   * in at the start of the epoch), and list of active worker balances\n   */\n  async getWorkerParams(blockNumber) {\n    if ((Object.keys(this.workerParamsCache).length === 0) ||\n      (blockNumber - this.workerParamsCache.firstBlockNumber >= this.epochSize)) {\n      this.epochSize = await this.enigmaContract.methods.getEpochSize().call();\n      const getWorkerParamsResult = await this.enigmaContract.methods.getWorkerParams(blockNumber).call();\n      this.workerParamsCache = {\n        firstBlockNumber: parseInt(getWorkerParamsResult[0]),\n        seed: JSBI.BigInt(getWorkerParamsResult[1]),\n        workers: getWorkerParamsResult[2],\n        stakes: getWorkerParamsResult[3].map((x) => JSBI.BigInt(x)),\n      };\n    }\n    return this.workerParamsCache;\n  }\n\n  /**\n   * Select the workers weighted-randomly based on the staked token amount that will run the computation task\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {Object} params - Worker params: 1) Worker addresses; 2) Worker stakes; 3) Network seed\n   * @param {number} workerGroupSize - Number of workers to be selected for task\n   * @return {Array} An array of selected workers where each selected worker is chosen with probability equal to\n   * number of staked tokens\n   */\n  selectWorkerGroup(scAddr, params, workerGroupSize = 5) {\n    // Find total number of staked tokens for workers\n    let tokenCpt = params.stakes.reduce((a, b) => JSBI.add(a, b), JSBI.BigInt(0));\n    let nonce = 0;\n    let selectedWorkers = [];\n    do {\n      // Unique hash for epoch, secret contract address, and nonce\n      const msg = abi.rawEncode(\n        ['uint256', 'bytes32', 'uint256'],\n        [params.seed.toString(10), scAddr, nonce],\n      );\n      const hash = web3Utils.keccak256(msg);\n      // Find random number between [0, tokenCpt)\n      let randVal = JSBI.remainder(JSBI.BigInt(hash), tokenCpt);\n      let selectedWorker = params.workers[params.workers.length - 1];\n      // Loop through each worker, subtracting worker's balance from the random number computed above. Once the\n      // decrementing randVal becomes negative, add the worker whose balance caused this to the list of selected\n      // workers. If worker has already been selected, increase nonce by one, resulting in a new hash computed above.\n      for (let i = 0; i < params.workers.length; i++) {\n        randVal = JSBI.subtract(randVal, params.stakes[i]);\n        if (randVal <= 0) {\n          selectedWorker = params.workers[i];\n          break;\n        }\n      }\n      if (!selectedWorkers.includes(selectedWorker)) {\n        selectedWorkers.push(selectedWorker);\n      }\n      nonce++;\n    }\n    while (selectedWorkers.length < workerGroupSize);\n    return selectedWorkers;\n  }\n\n  /**\n   * Send Task to Enigma p2p network for computation\n   *\n   * @param {Task} task - Task wrapper for contract deployment and regular tasks\n   * @return {EventEmitter} EventEmitter to be listened to track submission of Task to Enigma p2p network. Emits\n   * a response from the ENG network indicating whether client is ready to track the remainder of the task lifecycle\n   */\n  sendTaskInput(task) {\n    let emitter = new EventEmitter();\n    (async () => {\n      let rpcEndpointName = 'sendTaskInput';\n      let emitName = eeConstants.SEND_TASK_INPUT_RESULT;\n      if (task.isContractDeploymentTask) {\n        rpcEndpointName = 'deploySecretContract';\n        emitName = eeConstants.DEPLOY_SECRET_CONTRACT_RESULT;\n      }\n      try {\n        await new Promise((resolve, reject) => {\n          this.client.request(rpcEndpointName, Enigma.serializeTask(task), (err, response) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            resolve(response);\n          });\n        });\n        emitter.emit(emitName, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Get task result from p2p network\n   *\n   * @param {Task} task - Task wrapper for contract deployment and regular tasks\n   * @return {EventEmitter} EventEmitter to be listened to track getting result from Enigma network. Emits\n   * a response from the ENG network.\n   */\n  getTaskResult(task) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        const getTaskResultResult = await new Promise((resolve, reject) => {\n          this.client.request('getTaskResult', {taskId: task.taskId}, (err, response) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            resolve(response);\n          });\n        });\n        if (getTaskResultResult.result) {\n          switch (getTaskResultResult.result.status) {\n            case 'SUCCESS':\n              task.delta = getTaskResultResult.result.delta;\n              task.ethereumPayload = getTaskResultResult.result.ethereumPayload;\n              task.ethereumAddress = getTaskResultResult.result.ethereumAddress;\n              task.preCodeHash = getTaskResultResult.result.preCodeHash;\n            case 'FAILED':\n              task.encryptedAbiEncodedOutputs = getTaskResultResult.result.output;\n              task.usedGas = getTaskResultResult.result.usedGas;\n              task.workerTaskSig = getTaskResultResult.result.signature;\n            case 'UNVERIFIED':\n            case 'INPROGRESS':\n              task.engStatus = getTaskResultResult.result.status;\n              break;\n            default:\n              throw (new Error('Invalid task result status')).message;\n          }\n        } else {\n          task.engStatus = null;\n        }\n        emitter.emit(eeConstants.GET_TASK_RESULT_RESULT, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Decrypt task result\n   *\n   * @param {Task} task - Task wrapper for contract deployment and regular tasks\n   * @return {Task} Decrypted task result wrapper\n   */\n  async decryptTaskResult(task) {\n    const {privateKey} = this.obtainTaskKeyPair();\n    const derivedKey = utils.getDerivedKey(task.workerEncryptionKey, privateKey);\n    task.decryptedOutput = utils.decryptMessage(derivedKey, task.encryptedAbiEncodedOutputs);\n    return task;\n  }\n\n  /**\n   * Generator function for polling the Enigma p2p network for task status\n   *\n   * @param {Task} task - Task wrapper for contract deployment and regular tasks\n   * @param {boolean} withResult - Task wrapper for contract deployment and regular tasks\n   */\n  * pollTaskStatusGen(task, withResult) {\n    while (true) {\n      yield new Promise((resolve, reject) => {\n        this.client.request('getTaskStatus', {\n          taskId: task.taskId, workerAddress: task.workerAddress,\n          withResult: withResult,\n        }, (err, response) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          task.engStatus = response.result.status;\n          if (withResult) {\n            task.encryptedAbiEncodedOutputs = response.result.output;\n          }\n          resolve(task);\n        });\n      });\n    }\n  }\n\n  /**\n   * Inner poll status function that continues to poll the Enigma p2p network until the task has been verified\n   *\n   * @param {Task} task - Task wrapper for contract deployment and regular tasks\n   * @param {pollTaskStatusGen} generator - Generator function for polling Enigma p2p network for task status\n   * @param {EventEmitter} emitter - EventEmitter to track Enigma p2p network polling for Task status\n   */\n  innerPollTaskStatus(task, generator, emitter) {\n    let p = generator.next();\n    p.value.then((d) => {\n      emitter.emit(eeConstants.POLL_TASK_STATUS_RESULT, d);\n      if (d.engStatus !== 'SUCCESS' && d.engStatus !== 'FAILED') {\n        this.innerPollTaskStatus(task, generator, emitter);\n      }\n    }).catch((err) => {\n      emitter.emit(eeConstants.ERROR, err);\n    });\n  }\n\n  /**\n   * Poll the Enigma p2p network for a TaskInput's status\n   *\n   * @param {Task} task - Task wrapper for contract deployment and regular tasks\n   * @param {boolean} withResult - Task wrapper for contract deployment and regular tasks\n   * @return {EventEmitter} EventEmitter to be listened to track polling the Enigma p2p network for a Task status.\n   * Emits a Task with task result attributes\n   */\n  pollTaskStatus(task, withResult = false) {\n    let emitter = new EventEmitter();\n    let generator = this.pollTaskStatusGen(task, withResult);\n    this.innerPollTaskStatus(task, generator, emitter);\n    return emitter;\n  }\n\n  /**\n   * Serialize Task for submission to the Enigma p2p network\n   *\n   * @param {Task} task - Task wrapper for contract deployment and regular tasks\n   * @return {Object} Serialized Task for submission to the Enigma p2p network\n   */\n  static serializeTask(task) {\n    return task.isContractDeploymentTask ? {\n      preCode: task.preCode,\n      encryptedArgs: utils.remove0x(task.encryptedAbiEncodedArgs), encryptedFn: utils.remove0x(task.encryptedFn),\n      userDHKey: utils.remove0x(task.userPubKey), contractAddress: utils.remove0x(task.scAddr),\n      workerAddress: task.workerAddress,\n    } : {\n      taskId: task.taskId, workerAddress: task.workerAddress,\n      encryptedFn: utils.remove0x(task.encryptedFn), encryptedArgs: utils.remove0x(task.encryptedAbiEncodedArgs),\n      contractAddress: utils.remove0x(task.scAddr), userDHKey: utils.remove0x(task.userPubKey),\n    };\n  }\n\n  /**\n   * Deterministically generate a key-secret pair necessary for deriving a shared encryption key with the selected\n   * worker. This pair will be stored in local storage for quick retrieval.\n   *\n   * @return {Object} Public key-private key pair\n   */\n  obtainTaskKeyPair() {\n    let privateKey;\n    let encodedPrivateKey = window.localStorage.getItem('encodedPrivateKey');\n    if (encodedPrivateKey == null) {\n      let random = forge.random.createInstance();\n      // TODO: Query user for passphrase\n      random.seedFileSync = function(needed) {\n        return forge.util.fillString('cupcake', needed);\n      };\n      privateKey = forge.util.bytesToHex(random.getBytes(32));\n      window.localStorage.setItem('encodedPrivateKey', btoa(privateKey));\n    } else {\n      privateKey = atob(encodedPrivateKey);\n    }\n    let publicKey = EthCrypto.publicKeyByPrivateKey(privateKey);\n    return {publicKey, privateKey};\n  }\n\n  /**\n   * Create a task to deploy a secret contract - creates base task, creates task record, and sends task to the\n   * Enigma network.\n   *\n   * @param {string} fn - Function name\n   * @param {Array} args - Inputs for task in the form of [[arg1, '<type>'], ..., [argn, '<type>']]\n   *\n   * @param {Number} gasLimit - ENG gas limit for task computation\n   * @param {Number} gasPx - ENG gas price for task computation\n   * @param {string} sender - ETH address for task sender\n   * @param {string} preCode - Precode for contract deployment\n   * @return {Task} Task with attributes necessary for task record and Enigma network\n   */\n  deploySecretContract(fn, args, gasLimit, gasPx, sender, preCode) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        let scTask = await new Promise((resolve, reject) => {\n          this.createTask(fn, args, gasLimit, gasPx, sender, preCode, true).\n            on(eeConstants.CREATE_TASK, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n        });\n        emitter.emit(eeConstants.CREATE_TASK, scTask);\n        scTask = await new Promise((resolve, reject) => {\n          this.createTaskRecord(scTask).\n            on(eeConstants.CREATE_TASK_RECORD, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n        });\n        emitter.emit(eeConstants.CREATE_TASK_RECORD, scTask);\n        await new Promise((resolve, reject) => {\n          this.sendTaskInput(scTask).\n            on(eeConstants.DEPLOY_SECRET_CONTRACT_RESULT, (receipt) => resolve(receipt)).\n            on(eeConstants.ERROR, (error) => reject(error));\n        });\n        emitter.emit(eeConstants.DEPLOY_SECRET_CONTRACT_RESULT, scTask);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Create a compute task - creates base task, creates task record, and sends task to the Enigma network.\n   *\n   * @param {string} fn - Function name\n   * @param {Array} args - Inputs for task in the form of [[arg1, '<type>'], ..., [argn, '<type>']]\n   *\n   * @param {Number} gasLimit - ENG gas limit for task computation\n   * @param {Number} gasPx - ENG gas price for task computation\n   * @param {string} sender - ETH address for task sender\n   * @param {string} scAddr - Secret contract address\n   * @return {Task} Task with attributes necessary for task record and Enigma network\n   */\n  computeTask(fn, args, gasLimit, gasPx, sender, scAddr) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        let task = await new Promise((resolve, reject) => {\n          this.createTask(fn, args, gasLimit, gasPx, sender, scAddr, false).\n            on(eeConstants.CREATE_TASK, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n        });\n        emitter.emit(eeConstants.CREATE_TASK, task);\n        task = await new Promise((resolve, reject) => {\n          this.createTaskRecord(task).\n            on(eeConstants.CREATE_TASK_RECORD, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n        });\n        emitter.emit(eeConstants.CREATE_TASK_RECORD, task);\n        await new Promise((resolve, reject) => {\n          this.sendTaskInput(task).\n            on(eeConstants.SEND_TASK_INPUT_RESULT, (receipt) => resolve(receipt)).\n            on(eeConstants.ERROR, (error) => reject(error));\n        });\n        emitter.emit(eeConstants.SEND_TASK_INPUT_RESULT, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Return the version number of the library\n   *\n   * @return {string}\n   */\n  static version() {\n    return '0.0.1';\n  }\n}\n","import '@babel/polyfill';\n// window.Promise = Promise;\nimport utils from './enigma-utils';\nimport Enigma from './Enigma';\nimport * as eeConstants from './emitterConstants';\n\nexport {Enigma, utils, eeConstants};\n"],"sourceRoot":""}