const abi = require ('ethereumjs-abi');
const assert = require ('assert');
const web3Utils = require ('web3-utils');
const engUtils = require ('../lib/enigma-utils');
const EthCrypto = require ('eth-crypto');

describe ('enigma-utils', () => {
    let taskId;
    it ('...should generate taskId', () => {
        const arg = abi.rawEncode (['string'], ['test']).toString ("hex");
        taskId = engUtils.generateTaskId ('0x627306090abab3a6e1400e9345bc60c78a8bef57', 'b', arg, 1);

        assert.equal (taskId.length, 66);
    });

    it ('...should select worker', () => {
        const params = JSON.parse ('{"seed":"48555","blockNumber":"152","workers":["0x627306090abab3a6e1400e9345bc60c78a8bef57","0xf17f52151ebef6c7334fad080c5704d77216b732","0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef","0x821aea9a577a9b44299b9c15c88cf3087f3b5544","0x0d1d4e623d10f9fba5db95830f7d3839406c6af2","0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e","0x2191ef87e392377ec08e7c08eb105ef5448eced5","0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5","0x6330a553fc93768f612722bb8c2ec78ac90b3bbc","0x5aeda56215b167893e80b4fe645ba6d5bab767de"]}');
        const selectedWorker = engUtils.selectWorker (params.seed, taskId, params.workers);

        assert (web3Utils.isAddress (selectedWorker));
    });

    it ('...should verify worker', () => {
        const response = engUtils.verifyWorker ('0x627306090abaB3A6e1400e9345bC60c78a8BEf57', '0xf90a5ab902cf7b226964223a22333036323836383630383032333634353139383334373532353036393733383538363733303035222c2274696d657374616d70223a22323031382d30362d31325431373a31303a31392e313239323631222c22697376456e636c61766551756f7465537461747573223a224f4b222c22697376456e636c61766551756f7465426f6479223a2241674141414e6f4b414141484141594141414141414259422b56773575656f77662b717275514774772b3732485074634b437a36336d6c696d56626a716245354241542f2f2f2f2f41414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414277414141414141414141484141414141414141414b58425035575a42754c6a6d6e674b5a387a7a51324130306c65544a426370396f595432434458534e4841414141414141414141414141414141414141414141414141414141414141414141414141414141414141434431786e6e6665724b4648443275765971545864444138695a32326b434435787737683338434d664f6e674141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141413847306c6a703258614f5856744f50764135746e67763933463450586e50467141365a6e597435424768685059547165696c4a48416f4d70756e67792b734a507a51444f4c6d3368697151333474554243666e3270227db906822d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949456f54434341776d67417749424167494a414e4548646c30796f3743574d413047435371475349623344514542437755414d483478437a414a42674e560a42415954416c56544d517377435159445651514944414a44515445554d424947413155454277774c553246756447456751327868636d4578476a415942674e560a42416f4d45556c756447567349454e76636e4276636d4630615739754d5441774c675944565151444443644a626e526c6243425452316767515852305a584e300a5958527062323467556d567762334a3049464e705a323570626d6367513045774868634e4d5459784d5449794d446b7a4e6a55345768634e4d6a59784d5449770a4d446b7a4e6a5534576a42374d517377435159445651514745774a56557a454c4d416b474131554543417743513045784644415342674e564241634d43314e680a626e526849454e7359584a684d526f77474159445651514b4442464a626e526c6243424462334a7762334a6864476c76626a45744d437347413155454177776b0a535735305a57776755306459494546306447567a644746306157397549464a6c6347397964434254615764756157356e4d494942496a414e42676b71686b69470a397730424151454641414f43415138414d49494243674b434151454171586f74344f5a75706852386e75644672414669614778786b676d612f45732f42412b740a626543545552313036414c31454e635741344658334b2b453942424c302f375835726a356e4967582f522f317562686b4b5777396766715047334b65417449640a63762f75544f3179587635307671615076453143524368767a64532f5a45427151356f56764c54505a3356456963516a6c79744b674e39634c6e7862777475760a4c554b3765795250664a572f6b7364644f7a50385642426e696f6c596e524344326a724d525a386e424d325a5759776e586e7759654f4148562b5739744f68410a496d7752774b462f393579417356776432317279484d4a426347483730714c61675a37547479742b2b714f2f362b4b41584a754b775a716a526c457453457a380a675a51654666565967637753666f39366f534d417a56723756304c364853444c526e70623678786d625064714e6f6c3474514944415141426f34476b4d4947680a4d42384741315564497751594d426141464868446533616d66727a51723335434e2b733166447548415645384d41344741315564447745422f775145417749470a7744414d42674e5648524d4241663845416a41414d474147413155644877525a4d466377566142546f46474754326830644841364c793930636e567a6447566b0a63325679646d6c6a5a584d75615735305a577775593239744c324e76626e526c626e517651314a4d4c314e48574339426448526c6333526864476c76626c4a6c0a6347397964464e705a323570626d64445153356a636d77774451594a4b6f5a496876634e4151454c425141446767474241476349746874634b394956527a34720a52712b5a4b452b376b35302f4f7855736d57386161764f7a4b62306943783037595139727a69356e553733744d45327947524c7a6853566946732f4c704661390a6c70514c364a4c316151776d4452373454785947424149693566344935544a6f4343457152487a39316b7047365576796e32744c6d6e49644a625045347659760a574c72745858664642535350443441666e372b332f58556767416c63376f4354697a4f666262744f466c59413467354b63596753314a325a41654d51716255640a5a73655a4363615a5a5a6e363574647165653855585a6c447678302b4e644f304c522b357046792b6a754d307757627535394d767a636d5458626a73693748590a367a6435335971354b32343466774648525138654f42304957422b3450664d3746654141705a766c66716c4b4f6c4c635a4c327579566d7a526b7952357957370a32756f396d65685834344369504a32667365395936655174636645684d506b6d4858493031734e2b4b775062704133392b784f7353746a6850394e31593161320a745141566f2b7956674c67563248777337334663306f3377433738715045412b76326152732f4265335a46446744796768632f316667552b37432b50366b62710a6434706f7962364957384b434a6278664d4a766b6f72644e4f674f5555786e64504845692f74622f5537754c6a4c4f6750413d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2db90100368a9bb191b5552c53980f36269b05af127acd4c522a6e9af74534b81c1d7d9097b45703603b67139ec8c77d4c5eded86700ab947e9e429b18c80169c28be08206b55028b8c22ba73afaaed1334e78e96c0c1c690856470e509aa46634a75e976ac5d7ff06ba09f987e67020c2c245ba09d9beb873ae7b19bce49fe631e6d782f3a01e02ef95ef7dc32f13be4de4b9b6958e1b5a76349e2c522a0153859a826ff1354f12b37a1fa42b7ac03ee64e0987453b3a74bbab65d54093801ba76be48ba16e7fe839fc8a219bffdaa9ad15c23a052eb6c9a81102183022c1f98fe661f5154bc60a0ea6842fb64ccb240320ab9c93f9986e4ca24a2b859b305e18dc2b99');

        assert (response.verified);
    });

    it ('...should verify method signature', () => {
        const callable = 'mixAddresses(uint,address[],uint)';
        assert (engUtils.checkMethodSignature (callable));

        const callback = 'distribute(uint32,address[])';
        assert (engUtils.checkMethodSignature (callback));

        const preprocessor = 'rand()';
        assert (engUtils.checkMethodSignature (preprocessor));
    });

    it ('...should generate an Ethereum-like address from a public key', () => {
        const privkey = '0xcf389bf0b861c1cb8906dfbad20db57ccd97ee8027f059fa00f604e6227f99c2';
        const publicKey = EthCrypto.publicKeyByPrivateKey (
            privkey
        );

        // Comparing the result with the address generated by Surface
        const refAddress = '0xc44205c3aFf78e99049AfeAE4733a3481575CD26';
        const address = engUtils.toAddress (publicKey);

        assert.equal (address, refAddress, 'Computed address is different from the reference application');
    });

    it ('...should sign message with private key', () => {
        const privkey = '0xcf389bf0b861c1cb8906dfbad20db57ccd97ee8027f059fa00f604e6227f99c2';
        const publicKey = EthCrypto.publicKeyByPrivateKey (privkey);

        const message = 'test';
        const hash = web3Utils.soliditySha3 (message);
        const sig = engUtils.sign (privkey, hash);

        const signer = EthCrypto.recoverPublicKey (sig, hash);
        assert.equal (signer, publicKey, 'Unable to recover the public key');
    });

    it ('...should derive the right shared key', () => {
        const priv = 'e32868331fa8ef0138de0de85478346aec5e3912b6029ae71691c384237a3eeb';
        const pub = '044034127647bb7fdab7f1526c7d10be8b28174e2bba35b06ffd8a26fc2c20134a09e773199edc1ea792b150270ea3317689286c9fe239dd5b9c5cfd9e81b4b632';
        
        const shared = engUtils.getDerivedKey(pub, priv);
        assert.equal (shared, '4a4ed7cafaa603401268f3f73964efc67c1adac7eb90127c09dafe72db729374')
    });
});
